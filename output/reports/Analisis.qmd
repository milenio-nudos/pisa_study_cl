---
title: "PISA 2022"
format: html
editor: visual
---

# Análisis factorial y modelos lineales por país

```{r}
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, beeswarm, lme4)
options(scipen = 999) 
rm(list = ls()) 
```

```{r}
pisa22ict <- readRDS("../../input/proc_data/pisa22ict.rds")
```

## Análisis factorial por país

```{r}

#Datos para el análiis factorial

eff_data <- pisa22ict %>%
  select(CNT, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA, 
         IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA, 
         IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)

# Group by CNT (código país)
resultados_factoriales <- eff_data %>%
  group_by(CNT) %>%
  group_split() %>%
  map(~ fa(select(.x, -CNT), nfactors = 2, fm = "pa", rotate = "promax"))

# Tabla con todos los resultados por país

tabla_resultados <- map2_dfr(
  resultados_factoriales,
  unique(eff_data$CNT),
  ~ tibble(
    Variable = rownames(.x$loadings),
    CNT = .y,
    CargaFactor1 = .x$loadings[, 1],
    CargaFactor2 = .x$loadings[, 2]
    )
  ) %>%
  arrange(Variable)

tabla_resultados <- tabla_resultados %>% 
  mutate(Factor1 = if_else(CargaFactor1 >0.5, "TRUE", "FALSE")
) %>% 
  mutate(Factor2 = if_else(CargaFactor2 >0.5, "TRUE", "FALSE"))
  
view_df(tabla_resultados)
View(tabla_resultados)
tabla_resultados

```

En general la tendencia vista en el análisis factorial explotarorio global se repite. Sin embargo, llama la atención Corea, que invierte las dimensiones en la mayoria de las preguntas del índice (creo que es solo una la que si sigue la tendencia global). La pregunta Q08 tiene varios países con las dimensiones invertidas (Albania, Hong Kong, Jordania, etc.). Sin embargo muchos de estos se acercan a 0.5. Debemos establecer un criterio mínimo de magnitud de presencia del factor para descartar países o variables. La Q09 se comporta bastante similar a la Q08, revisar ambos casos. La Q10 parece ser del factor 2 sin embargo con una carga más baja que otras variables.

```{r}

# Cleavelant dot plot

ggplot2::ggplot(tabla_resultados, aes(CargaFactor1, Variable)) +
        geom_point() +
        geom_point(
          color="#fe3057"
        )


ggplot2::ggplot(tabla_resultados, aes(CargaFactor2, Variable)) +
        geom_point() +
        geom_point(
          color="#fe3057"
        )
```

**Agregar labels de los outlyers con geomtext:** crear nueva columna en el dataframe

Al parecer, todas las variables calzan en una categoría exeptuando ICTQ10JA, que presenta cargas positivas y de magnitud similar en ambas dimensiones. Es posible ignorar esa pregunta para el análisis.

Q08, Q09, Q12 y Q13 tienen cargas similares en ambos factores.

## Comparación índice de autoeficacia entre países OCDE y no OCDE

#### Creación de variable OCDE

```{r}

pisa22ict <- pisa22ict %>% 
  mutate(OCDE = if_else(CNT %in% c("AUS", "AUT", "BEL", "CHL", "CRI",
                                "CZE", "DNK", "EST", "FIN", "DEU", "GRC", "HUN", "ISL", "IRL", "ISR", "ITA", "JPN", "KOR", "LTU", "LVA", "POL", "SVK", "SVN", "ESP", "SWE", "CHE", "TUR", "GBR", "USA"), "TRUE", "FALSE"))
```

#### Comparación OCDE y no OCDE en los índices de autoeficacia

```{r}

# Creación de función para calcular valor p dentro de table1, con prueba t o chi cuadrado según corresponda

pvalue <- function(x, ...) {
    # Construct vectors of data y, and groups (strata) g
    y <- unlist(x)
    g <- factor(rep(1:length(x), times=sapply(x, length)))
    if (is.numeric(y)) {
        # For numeric variables, perform a standard 2-sample t-test
        p <- t.test(y ~ g)$p.value
    } else {
        # For categorical variables, perform a chi-squared test of independence
        p <- chisq.test(table(y, g))$p.value
    }
    # Format the p-value, using an HTML entity for the less-than sign.
    # The initial empty string places the output on the line below the variable label.
    c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}

# Tabla de descriptivos índice autoeficacia

tabla_1 <- table1::table1(~ effgen + effspec + ICTEFFIC + OCDE, data=pisa22ict, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos índice",
               footnote = "Fuente: Elaboración propia con datos de PISA.")

tabla_1
```

```{r}

 tabla_2 <- table1::table1(~ effgen + effspec + ICTEFFIC | OCDE, data=pisa22ict, topclass="Rtable1-zebra", overall = FALSE, extra.col=list(`P-value`=pvalue), caption = "Tabla 1: Estadísticos Descriptivos índice: Comparación OCDE y no OCDE",
               footnote = "Fuente: Elaboración propia con datos de PISA.")

tabla_2
```

Decidí incluir el índice elaborado por PISA, sin embargo el rango de los datos está extraño para interpretar. Una conclusión a priori es que la autoeficacia específica es más alta en los países que no son de la OCDE, y la general es mayor en los países OCDE.

## Gráficos de densidad para visualizar la distribución de los índices (comparación OCDE y no OCDE)

```{r}

library(ggplot2)

# Crear un gráfico de densidad por grupos
ggplot(pisa22ict, aes(x = effgen, fill = OCDE)) +
  geom_density(alpha = 0.6) +
  labs(title = "Distribución del índice de autoeficacia general",
       x = "Autoeficacia General",
       y = "Densidad") +
  scale_fill_manual(values = c("#5f5758", "#fe3057")) +
  theme_minimal()


# Crear un gráfico de densidad por grupos
ggplot(pisa22ict, aes(x = effspec, fill = OCDE)) +
  geom_density(alpha = 0.6) +
  labs(title = "Distribución del índice de autoeficacia general",
       x = "Autoeficacia General",
       y = "Densidad") +
  scale_fill_manual(values = c("#5f5758", "#fe3057")) +
  theme_minimal()
```

## Modelos de regresión lineal por país

```{r}
  
# Crear modelos generales y específicos agrupados por código de país
modelo_effgen <- pisa22ict %>%
  group_by(CNT) %>%
  nest() %>%
  mutate(modelo = map(data, ~lm(effgen ~ sex, data = .x)))

modelo_effspec <- pisa22ict %>%
  group_by(CNT) %>%
  nest() %>%
  mutate(modelo = map(data, ~lm(effspec ~ sex, data = .x)))

# Extraer resúmenes individuales, manteniendo el CNT
modelo_effgen <- modelo_effgen %>%
  mutate(summary = map(modelo, summary)) %>%
  select(CNT, summary)

modelo_effspec <- modelo_effspec %>%
  mutate(summary = map(modelo, summary)) %>%
  select(CNT, summary)

# Crear nuevamente variable OCDE

modelo_effspec <- modelo_effspec %>% 
  mutate(OCDE = if_else(CNT %in% c("AUS", "AUT", "BEL", "CHL", "CRI", "CZE", "DNK", "EST", "FIN", "DEU", "GRC", "HUN", "ISL", "IRL", "ISR", "ITA", "JPN", "KOR", "LTU", "LVA", "POL", "SVK", "SVN", "ESP", "SWE", "CHE", "TUR", "GBR", "USA"), "TRUE", "FALSE"))

modelo_effgen <- modelo_effgen %>% 
  mutate(OCDE = if_else(CNT %in% c("AUS", "AUT", "BEL", "CHL", "CRI", "CZE", "DNK", "EST", "FIN", "DEU", "GRC", "HUN", "ISL", "IRL", "ISR", "ITA", "JPN", "KOR", "LTU", "LVA", "POL", "SVK", "SVN", "ESP", "SWE", "CHE", "TUR", "GBR", "USA"), "TRUE", "FALSE"))

# Crear un dataframe con las betas de los modelos

coef_data1 <- data.frame(
  coef_gen = sapply(1:52, function(i) modelo_effgen[[2]][[i]][["coefficients"]][[2]]), Countrie = modelo_effgen [1], OCDE = modelo_effgen [3]
)

coef_data2 <- data.frame(
  coef_spec = sapply(1:52, function(i) modelo_effspec[[2]][[i]][["coefficients"]][[2]]), Countrie = modelo_effspec [1], OCDE = modelo_effspec [3]
)
```

## Análisis descriptivo y visualización de estimadores por país

```{r}
# Descrpitivos de los estimadores por país

df_aux <- dplyr::left_join(coef_data1, coef_data2) 

tabla_3 <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 2: Estadísticos Descriptivos Estimadores",
               footnote = "Fuente: Elaboración propia con datos de PISA.")

tabla_4 <- table1::table1(~ coef_gen + coef_spec | OCDE, data=df_aux, topclass="Rtable1-zebra", overall=FALSE, extra.col=list(`P-value`=pvalue), caption = "Tabla 3: Comparación OCDE y no OCDE",
               footnote = "Fuente: Elaboración propia con datos de PISA.")

tabla_3 #La tabla se visualiza así por incompatibilidad del paquete con qmd. Sin embargo cuando se renderiza en html se ve bien

tabla_4 #La tabla se visualiza así por incompatibilidad del paquete con qmd. Sin embargo cuando se renderiza en html se ve bien

```

Desviación estándar en los estimadores de autoeficacia específica es mucho mayor.

En ambas autoeficacias (específica y general), se percibe una diferencia significativa (p \< 0,001) entre los países que pertenecen a la OCDE y los que no. Los datos apuntan a que la diferencia en autoeficacia específica es considerablemente mayor en los países de la OCDE, lo cual creo que podría deberse a una falta de recursos, que impide a los hombres (más interesados en aprender habilidades específicas) de países menos desarrollados diferenciarse en tal magnitud con las mujeres **(esta hipótesis pierde fuerza al analizar el índice según OCDE y no OCDE)**. Esto podría ir en la linea del planteamiento de Nicolás, que la batería estaría midiendo más habilidades que autoeficacias. En la autoeficacia general el efecto es contrario, o sea, los hombres reportan muchas menores capacidades generales que las mujeres en los países no-OCDE que en los si-OCDE.

```{r}

# Visualización de las distribuciones de las betas

beeswarm::beeswarm(coef_data1$coef_gen,
                   horizontal=TRUE,
                   method="swarm",
                   col=c("#fe3057"),
                   cex=1,
                   pch=18,
                   main= "Distribución de Coeficientes Autoeficacia general",
                   )


beeswarm::beeswarm(coef_data2$coef_spec,
                   horizontal=TRUE,
                   method="swarm",
                   col=c("#fe3057"),
                   cex=1,
                   pch=18,
                   main= "Distribución de Coeficientes Autoeficacia Específica",
                   )


# Visualización de las distribuciones de las betas, según país OCDE o no

beeswarm::beeswarm(coef_data1$coef_gen ~ coef_data1$OCDE,
                   horizontal=TRUE,
                   method="swarm",
                   col=c("#5f5758", "#fe3057"),
                   cex=1,
                   pch=18,
                   main= "Distribución de Coeficientes Autoeficacia general",
                   )


beeswarm::beeswarm(coef_data2$coef_spec ~ coef_data2$OCDE,
                   horizontal=TRUE,
                   method="swarm",
                   col=c("#5f5758", "#fe3057"),
                   cex=1,
                   pch=18,
                   main= "Distribución de Coeficientes Autoeficacia Específica",
                   )

```

-   Propongo instigar en los casos límites de ambos grupos

-   En los países OCDE, Chile es el que presenta menor diferencia en autoeficacia específica, lo cual se alinearía con la hipótesis presentada

-   En la autoeficacia general, la beta con menor efecto (en los paises no OCDE) es Argentina

## Modelos de multinivel

```{r}

pisa22ict$OCDE <- as.factor(pisa22ict$OCDE)

pisa22ict$CNT <- as.factor(pisa22ict$CNT)

modelo_3niveles_effgen <- lmer(effgen ~ sex + OCDE +
                        (1 | CNT),  # Efecto aleatorio en Nivel 2
                        data = pisa22ict)

modelo_3niveles_effgen2 <- lmer(effgen ~ sex + OCDE + 
                         (1 + sex | CNT),  # Pendiente aleatoria en Nivel 2
                         data = pisa22ict)

modelo_3niveles_effspec <- lmer(effspec ~ sex + OCDE +
                        (1 | CNT),  # Efecto aleatorio en Nivel 2
                        data = pisa22ict)
modelo_3niveles_effspec2 <- lmer(effspec ~ sex + OCDE +
                         (1 + sex | CNT),  # Pendiente aleatoria en Nivel 2
                         data = pisa22ict)

sjPlot::tab_model(modelo_3niveles_effgen, modelo_3niveles_effgen2, modelo_3niveles_effspec, modelo_3niveles_effspec2,
                  title = "Tabla 5: Resultados de Regresiones Multinivel",
                  p.style = "stars",
                  dv.labels = c("effgen", "effgen pendiente aleatoria", "effspec", "effspec pendiente aleatoria"),
                  p.threshold = c(0.05, 0.01, 0.001),
                  show.se = TRUE,
                  digits =3)

```

```         
Aviso: Model failed to converge with max|grad| = 0.00602937 (tol = 0.002, component 1) 
Aviso: Model failed to converge with max|grad| = 0.0031605 (tol = 0.002, component 1)
```
