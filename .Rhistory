select(-CNTRYID) %>%
group_by(CNTRYID) %>%
group_split() %>%
map(~ fa(.x, nfactors = 2, fm = "pa", rotate = "promax"))
eff_data <- pisa22ict %>%
select(CNTRYID, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA,
IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA,
IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
resultados_factoriales <- eff_data %>%
select(-CNTRYID) %>%
group_by(CNTRYID) %>%
group_split() %>%
map(~ fa(.x, nfactors = 2, fm = "pa", rotate = "promax"))
resultados_factoriales <- eff_data %>%
select(-CNTRYID) %>%
group_by(eff_data$CNTRYID) %>%
group_split() %>%
map(~ fa(.x, nfactors = 2, fm = "pa", rotate = "promax"))
resultados_factoriales <- eff_data %>%
group_by(CNTRYID) %>%
select(-CNTRYID) %>%
group_split() %>%
map(~ fa(.x, nfactors = 2, fm = "pa", rotate = "promax"))
resultados_factoriales <- eff_data %>%
group_by(CNTRYID) %>%
group_split() %>%
map(~ fa(select(.x, -CNTRYID), nfactors = 2, fm = "pa", rotate = "promax"))
# Crear una tabla con los resultados del análisis factorial por país
tabla_resultados <- map2_dfr(
resultados_factoriales,
unique(eff_data$CNTRYID),
~ tibble(
CNTRYID = .y,
Variable = rownames(.x$loadings),
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
)
# Imprimimos la tabla de resultados
print(tabla_resultados)
pacman::p_load(dplyr, haven, psych, purr, tidyr, sjPlot)
pacman::p_load(dplyr, haven, psych, purr, tidyr, sjPlot)
options(scipen = 999)
rm(list = ls())
```{r}
pisa22ict <- readRDS("input/proc_data/pisa22ict.rds")
eff_data <- pisa22ict %>%
select(CNTRYID, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA,
IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA,
IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
resultados_factoriales <- eff_data %>%
group_by(CNTRYID) %>%
group_split() %>%
map(~ fa(select(.x, -CNTRYID), nfactors = 2, fm = "pa", rotate = "promax"))
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot)
resultados_factoriales <- eff_data %>%
group_by(CNTRYID) %>%
group_split() %>%
map(~ fa(select(.x, -CNTRYID), nfactors = 2, fm = "pa", rotate = "promax"))
View(resultados_factoriales)
# Crear una tabla con los resultados del análisis factorial por país
tabla_resultados <- map2_dfr(
resultados_factoriales,
unique(eff_data$CNTRYID),
~ tibble(
CNTRYID = .y,
Variable = rownames(.x$loadings),
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
)
# Imprimimos la tabla de resultados
print(tabla_resultados)
View(tabla_resultados)
View(pisa22ict)
View(pisa22ict)
print(tabla_resultados[[1]])
print(tabla_resultados[[1]])
sjPlot::tab_model(resultados_factoriales)
sjPlot::tab_model(resultados_factoriales[[1]])
df <- tibble(texto = unlist(resultados_factoriales), na.omit=FALSE)
View(df)
tabla_resultados <- map2_dfr(
resultados_factoriales[[1]],
unique(eff_data$CNTRYID),
~ tibble(
CNTRYID = .y,
Variable = rownames(.x$loadings),
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
)
modelo_effgen <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effgen ~ sex, data = .))
modelo_effgen <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effgen ~ sex, data = .))
modelo_effspec <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effspec ~ sex, data = .))
# Extraer modelos individuales
models_effgen <- lapply(modelo_effgen$modelo, summary)
# Extraer modelos individuales
models_effgen <- lapply(modelo_effgen$modelo, summary)
models_effspec <- lapply(modelo_effspec$modelo, summary)
View(modelo_effgen)
View(modelo_effspec)
View(models_effgen)
View(modelo_effgen)
models_effgen[[1]]
models_effgen[[2]]
models_effspec[[1]]
models_effspec[[2]]
models_effspec[[3]]
models_effspec[[4]]
models_effspec[[5]]
modelo_effgen[[1]]
# Aquí se selecciona el factor 1 o 2, en este caso usaremos "CargaFactor1" como ejemplo
tabla_factor1 <- tabla_resultados %>%
select(CNTRYID, Variable, CargaFactor1) %>%
pivot_wider(names_from = CNTRYID, values_from = CargaFactor1)
View(tabla_factor1)
# Para el factor 2, simplemente repite el proceso con CargaFactor2
tabla_factor2 <- tabla_resultados %>%
select(CNTRYID, Variable, CargaFactor2) %>%
pivot_wider(names_from = CNTRYID, values_from = CargaFactor2)
View(tabla_factor2)
summary(pisa22ict$CNT)
levels(pica22ict$CNT)
levels(pisa22ict$CNT)
table(dataset$variable)
table(pisa22ict$CNT)
modelo_effgen[[1]]
models_effgen[[10]] #Modelo Albania
models_effspec[[10]]
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, beeswarm)
options(scipen = 999)
rm(list = ls())
pisa22ict <- readRDS("input/proc_data/pisa22ict.rds")
#Datos para el análiis factorial
eff_data <- pisa22ict %>%
select(CNT, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA,
IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA,
IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
# Group by CNT (código país)
resultados_factoriales <- eff_data %>%
group_by(CNT) %>%
group_split() %>%
map(~ fa(select(.x, -CNT), nfactors = 2, fm = "pa", rotate = "promax"))
# Tabla con todos los resultados por país
tabla_resultados <- map2_dfr(
resultados_factoriales,
unique(eff_data$CNT),
~ tibble(
CNT = .y,
Variable = rownames(.x$loadings),
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
)
#Modelos generales y específicos, group by código país
modelo_effgen <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effgen ~ sex, data = .))
modelo_effspec <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effspec ~ sex, data = .))
# Extraer modelos individuales
models_effgen <- lapply(modelo_effgen$modelo, summary)
models_effspec <- lapply(modelo_effspec$modelo, summary)
unique(pisa22ict$CNT)
models_effgen[[1]] #Modelos Albania
models_effspec[[1]]
models_effgen[[10]] #Modelos Chile
models_effspec[[10]]
# Crear un dataframe con las betas de los modelos
coef_data1 <- data.frame(
coef_gen = sapply(1:52, function(i) models_effgen[[i]][["coefficients"]][[2]])
)
coef_data2 <- data.frame(
coef_spec = sapply(1:52, function(i) models_effspec[[i]][["coefficients"]][[2]])
)
# Creamos variable de si el país está en la OCDE
aux <- c("no", "no", "si", "si", "si", "no", "no", "no", "si", "no", "si", "no", "si", "si", "no", "si", "si", "no", "si", "si", "no", "si", "si", "si", "si", "si", "si", "no", "no", "si", "no", "si", "no", "no", "no", "no", "no", "si", "no", "no", "no", "si", "si", "si", "si", "si", "si", "si", "no", "si", "si", "no")
df_aux <- data.frame(OCDE = aux) # Convertimos en data.freame
coef_data1 <- cbind(coef_data1, df_aux) # Unimos al data frame de las betas
coef_data2 <- cbind(coef_data2, df_aux) # Unimos al data frame de las betas
rm(df_aux, aux) # Removemos objetos auxiliares
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
# Descrpitivos de los estimadores por país
df_aux <- cbind(coef_data1, coef_data2)
tabla_descr <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos Estimadores",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr2 <- table1::table1(~ coef_gen + coef_spec | OCDE, data=df_aux, topclass="Rtable1-zebra", overall=FALSE, extra.col=list(`P-value`=pvalue), caption = "Tabla 2: Comparación OCDE y no OCDE",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr
tabla_descr2
# Visualización de las distribuciones de las betas
beeswarm::beeswarm(coef_data1$coef,
horizontal=TRUE,
method="swarm",
col=c("#fe3057"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia general",
)
beeswarm::beeswarm(coef_data2$coef,
horizontal=TRUE,
method="swarm",
col=c("#fe3057"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia Específica",
)
# Visualización de las distribuciones de las betas, según país OCDE o no
beeswarm::beeswarm(coef_data1$coef ~ coef_data1$OCDE,
horizontal=TRUE,
method="swarm",
col=c("#fe3057", "#5f5758"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia general",
)
beeswarm::beeswarm(coef_data2$coef ~ coef_data2$OCDE,
horizontal=TRUE,
method="swarm",
col=c("#fe3057", "#5f5758"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia Específica",
)
tabla_descr
tabla_descr <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos Estimadores",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr
tabla_descr <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos Estimadores",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr
tabla_descr <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos Estimadores",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr
tabla_descr <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos Estimadores",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr2 <- table1::table1(~ coef_gen + coef_spec | OCDE, data=df_aux, topclass="Rtable1-zebra", overall=FALSE, extra.col=list(`P-value`=pvalue), caption = "Tabla 2: Comparación OCDE y no OCDE",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr
tabla_descr2
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, beeswarm)
options(scipen = 999)
rm(list = ls())
pisa22ict <- readRDS("input/proc_data/pisa22ict.rds")
#Datos para el análiis factorial
eff_data <- pisa22ict %>%
select(CNT, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA,
IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA,
IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
# Group by CNT (código país)
resultados_factoriales <- eff_data %>%
group_by(CNT) %>%
group_split() %>%
map(~ fa(select(.x, -CNT), nfactors = 2, fm = "pa", rotate = "promax"))
# Tabla con todos los resultados por país
tabla_resultados <- map2_dfr(
resultados_factoriales,
unique(eff_data$CNT),
~ tibble(
CNT = .y,
Variable = rownames(.x$loadings),
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
)
#Modelos generales y específicos, group by código país
modelo_effgen <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effgen ~ sex, data = .))
modelo_effspec <- pisa22ict %>%
group_by(CNT) %>%
do(modelo = lm(effspec ~ sex, data = .))
# Extraer modelos individuales
models_effgen <- lapply(modelo_effgen$modelo, summary)
models_effspec <- lapply(modelo_effspec$modelo, summary)
unique(pisa22ict$CNT)
models_effgen[[1]] #Modelos Albania
models_effspec[[1]]
models_effgen[[10]] #Modelos Chile
models_effspec[[10]]
# Crear un dataframe con las betas de los modelos
coef_data1 <- data.frame(
coef_gen = sapply(1:52, function(i) models_effgen[[i]][["coefficients"]][[2]])
)
coef_data2 <- data.frame(
coef_spec = sapply(1:52, function(i) models_effspec[[i]][["coefficients"]][[2]])
)
# Creamos variable de si el país está en la OCDE
aux <- c("no", "no", "si", "si", "si", "no", "no", "no", "si", "no", "si", "no", "si", "si", "no", "si", "si", "no", "si", "si", "no", "si", "si", "si", "si", "si", "si", "no", "no", "si", "no", "si", "no", "no", "no", "no", "no", "si", "no", "no", "no", "si", "si", "si", "si", "si", "si", "si", "no", "si", "si", "no")
df_aux <- data.frame(OCDE = aux) # Convertimos en data.freame
coef_data1 <- cbind(coef_data1, df_aux) # Unimos al data frame de las betas
coef_data2 <- cbind(coef_data2, df_aux) # Unimos al data frame de las betas
rm(df_aux, aux) # Removemos objetos auxiliares
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
# Descrpitivos de los estimadores por país
df_aux <- cbind(coef_data1, coef_data2)
tabla_descr <- table1::table1(~ coef_gen + coef_spec + OCDE, data=df_aux, topclass="Rtable1-zebra", caption = "Tabla 1: Estadísticos Descriptivos Estimadores",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr2 <- table1::table1(~ coef_gen + coef_spec | OCDE, data=df_aux, topclass="Rtable1-zebra", overall=FALSE, extra.col=list(`P-value`=pvalue), caption = "Tabla 2: Comparación OCDE y no OCDE",
footnote = "Fuente: Elaboración propia con datos de PISA.")
tabla_descr
tabla_descr2
# Visualización de las distribuciones de las betas
beeswarm::beeswarm(coef_data1$coef,
horizontal=TRUE,
method="swarm",
col=c("#fe3057"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia general",
)
beeswarm::beeswarm(coef_data2$coef,
horizontal=TRUE,
method="swarm",
col=c("#fe3057"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia Específica",
)
# Visualización de las distribuciones de las betas, según país OCDE o no
beeswarm::beeswarm(coef_data1$coef ~ coef_data1$OCDE,
horizontal=TRUE,
method="swarm",
col=c("#fe3057", "#5f5758"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia general",
)
beeswarm::beeswarm(coef_data2$coef ~ coef_data2$OCDE,
horizontal=TRUE,
method="swarm",
col=c("#fe3057", "#5f5758"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia Específica",
)
tabla_resultados <- map2_dfr(
resultados_factoriales,
unique(eff_data$CNT),
~ tibble(
Variable = rownames(.x$loadings),
CNT = .y,
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
)
View(tabla_resultados)
tabla_resultados <- map2_dfr(
resultados_factoriales,
unique(eff_data$CNT),
~ tibble(
Variable = rownames(.x$loadings),
CNT = .y,
CargaFactor1 = .x$loadings[, 1],
CargaFactor2 = .x$loadings[, 2]
)
) %>%
arrange(Variable)
View(tabla_resultados)
tabla_descr2
# Visualización de las distribuciones de las betas
beeswarm::beeswarm(coef_data1$coef,
horizontal=TRUE,
method="swarm",
col=c("#fe3057"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia general",
)
beeswarm::beeswarm(coef_data2$coef,
horizontal=TRUE,
method="swarm",
col=c("#fe3057"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia Específica",
)
# Visualización de las distribuciones de las betas, según país OCDE o no
beeswarm::beeswarm(coef_data1$coef ~ coef_data1$OCDE,
horizontal=TRUE,
method="swarm",
col=c("#fe3057", "#5f5758"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia general",
)
beeswarm::beeswarm(coef_data2$coef ~ coef_data2$OCDE,
horizontal=TRUE,
method="swarm",
col=c("#fe3057", "#5f5758"),
cex=1,
pch=18,
main= "Distribución de Coeficientes Autoeficacia Específica",
)
View(models_effgen)
View(df_aux)
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, beeswarm, lme4)
install.packages("pacman")
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot, ggplot2, parameters, table1, beeswarm, lme4)
options(scipen = 999)
rm(list = ls())
#Datos para el análiis factorial
eff_data <- pisa22ict %>%
select(CNT, IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA,
IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA,
IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
# Cleavelant dot plot
ggplot2::ggplot(tabla_resultados, aes(CargaFactor1, Variable)) +
geom_point() +
geom_point(
color="#fe3057"
)
datos_proc <- readRDS("~/GitHub/milenio_nudos/pisa_study_cl/input/proc_data/datos_proc.rds")
datos_proc <- readRDS("~/GitHub/milenio_nudos/pisa_study_cl/input/proc_data/datos_proc.rds")
pisa22ict <- readRDS("~/GitHub/milenio_nudos/pisa_study_cl/input/proc_data/pisa22ict.rds")
pacman::p_load(dplyr, haven, psych, purrr, tidyr, sjPlot, ggplot2,
parameters, table1, beeswarm, lme4, rio, skimr, effects,
labelled, knitr, kableExtra, stringr, sjmisc, purr, ggbeeswarm,
sjlabelled)
options(scipen = 999)
options(digits = 2)
rm(list = ls())
variables_labels <- c(
"buscar_info",
"evaluar_info",
"compartir_info",
"colaboracion_pares",
"explicar_info_pares",
"editar_texto",
"manejar_datos",
"crear_presentacion",
"manejar_pag_web",
"configuracion_privacidad",
"selecc_mejor_app",
"crear_programa",
"hallar_error_programa",
"representar_solucion_logica")
pisa22ict <- readRDS("../../../input/proc_data/pisa22ict.rds")
# "No sé" como NA
pisa22ict <- pisa22ict|>
mutate(across(starts_with("IC183Q0"),~ ifelse(. == 5, NA, .)))
# Recodificación de variables
var_label(pisa22ict) <- list(
IC183Q01JA = "buscar_info",
IC183Q02JA = "evaluar_info",
IC183Q03JA = "compartir_info",
IC183Q04JA = "colaboracion_pares",
IC183Q05JA = "explicar_info_pares",
IC183Q07JA = "editar_texto",
IC183Q08JA = "manejar_datos",
IC183Q09JA = "crear_presentacion",
IC183Q10JA = "manejar_pag_web",
IC183Q12JA = "configuracion_privacidad",
IC183Q13JA = "selecc_mejor_app",
IC183Q14JA = "crear_programa",
IC183Q15JA = "hallar_error_programa",
IC183Q16JA = "representar_solucion_logica"
)
pisa22ict <- pisa22ict %>%
mutate(OCDE = if_else(CNT %in% c("AUS", "AUT", "BEL", "CHL", "CRI",
"CZE", "DNK", "EST", "FIN", "DEU", "GRC", "HUN", "ISL", "IRL", "ISR", "ITA", "JPN", "KOR", "LTU", "LVA", "POL", "SVK", "SVN", "ESP", "SWE", "CHE", "TUR", "GBR", "USA"), 1, 0))
efficacy_variables <- pisa22ict |>
select(CNT, #Country
IC183Q01JA, IC183Q02JA, IC183Q03JA, IC183Q04JA, IC183Q05JA,
IC183Q07JA, IC183Q08JA, IC183Q09JA, IC183Q10JA, IC183Q12JA,
IC183Q13JA, IC183Q14JA, IC183Q15JA, IC183Q16JA)
# 1. Presentar tipos de autoeficacia ----
beeswarm_plot <- pisa22ict|>
group_by(CNT)|>
summarise(mean_geneff = mean(effgen, na.rm = T),
mean_speceff = mean(effspec, na.rm = T))|>
ungroup()|>
pivot_longer(cols = 2:3,
names_to = "type",
values_to = "score")
pisa22ict <- readRDS("../../../input/proc_data/pisa22ict.rds")
